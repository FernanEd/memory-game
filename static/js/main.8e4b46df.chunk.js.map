{"version":3,"sources":["components/Card.js","components/Deck.js","components/Scoreboard.js","App.js","Credits.js","index.js"],"names":["Card","pokemonIndex","evaluateCardIndex","imgSrc","useEffect","console","log","className","onClick","src","Deck","addScore","clearScore","pokedexLength","useState","seenPokemons","setSeenPokemons","generatedPokemons","setGeneratedPokemons","imagesUrl","setImagesUrl","numberOfCards","isLoading","setIsLoading","generateNewBatch","newBatch","Array","keys","n","randomIndex","Math","floor","random","includes","push","sort","a","b","index","newSeenPokemons","images","fetch","response","json","data","sprite","sprites","front_default","map","e","cardIndex","Scoreboard","score","bestScore","id","App","setScore","localStorage","getItem","setBestScore","newScore","setItem","Credits","href","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e4b46df.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function Card({ pokemonIndex, evaluateCardIndex, imgSrc }) {\n  useEffect(() => {\n    console.log(imgSrc);\n  }, []);\n\n  return (\n    <div className=\"card\" onClick={() => evaluateCardIndex(pokemonIndex)}>\n      <img src={imgSrc} />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport Card from './Card';\n\nexport default function Deck({ addScore, clearScore, pokedexLength }) {\n  const [seenPokemons, setSeenPokemons] = useState([]);\n  const [generatedPokemons, setGeneratedPokemons] = useState([]);\n  const [imagesUrl, setImagesUrl] = useState([]);\n  const [numberOfCards, setNumberOfCards] = useState(3);\n  const [isLoading, setIsLoading] = useState(true);\n\n  //Every time a new batch is generated\n\n  const generateNewBatch = () => {\n    let newBatch = [];\n\n    //Generate random indexes for N cards, the last one is guaranteed to not have been seen yet\n    for (let n of [...Array(numberOfCards).keys()]) {\n      let randomIndex = Math.floor(Math.random() * pokedexLength) + 1;\n\n      //If is the last generated card, generate a never seen card\n      if (n === numberOfCards - 1) {\n        while (seenPokemons.includes(randomIndex)) {\n          randomIndex = Math.floor(Math.random() * pokedexLength) + 1;\n        }\n      }\n      newBatch.push(randomIndex);\n    }\n\n    //Shuffle newBatch array randomly\n    newBatch.sort((a, b) => 0.5 - Math.random());\n\n    setGeneratedPokemons(newBatch);\n  };\n\n  const evaluateCardIndex = (index) => {\n    if (!seenPokemons.includes(index)) {\n      //Add pokemon to pokemon array\n      let newSeenPokemons = [...seenPokemons, index];\n      setSeenPokemons(newSeenPokemons);\n\n      //Increase score\n      addScore();\n    } else {\n      //Drop score and seen pokemons\n      clearScore();\n      setSeenPokemons([]);\n    }\n\n    //Repopulate batch\n    generateNewBatch();\n  };\n\n  useEffect(() => {\n    generateNewBatch();\n  }, []);\n\n  useEffect(async () => {\n    setIsLoading(true);\n    let images = [];\n\n    for (let pokemonIndex of generatedPokemons) {\n      let response = await fetch(\n        `https://pokeapi.co/api/v2/pokemon/${pokemonIndex}`\n      );\n      let data = await response.json();\n      let sprite = data.sprites;\n      let imgSrc = sprite.front_default;\n      images.push(imgSrc);\n    }\n\n    setImagesUrl(images);\n    setIsLoading(false);\n  }, [generatedPokemons]);\n\n  return (\n    <div>\n      <div className=\"card-wrapper\">\n        {isLoading\n          ? 'Loading...'\n          : [...new Array(numberOfCards)].map((e, cardIndex) => (\n              <Card\n                key={cardIndex}\n                pokemonIndex={generatedPokemons[cardIndex]}\n                evaluateCardIndex={evaluateCardIndex}\n                imgSrc={imagesUrl[cardIndex]}\n              />\n            ))}\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nexport default function Scoreboard({ score, bestScore }) {\n  return (\n    <div id=\"scoreboard\">\n      <div>Score: {score}</div>\n      <div>Best score: {bestScore}</div>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport Deck from './components/Deck';\nimport Scoreboard from './components/Scoreboard';\n\nexport default function App() {\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(\n    localStorage.getItem('best_score') || 0\n  );\n  const [pokedexLength, setPokedexLength] = useState(151);\n\n  const addScore = () => {\n    let newScore = score + 1;\n    setScore(newScore);\n\n    //If the current score is more than the best score,\n    //update best score\n    if (newScore > bestScore) {\n      setBestScore(newScore);\n      localStorage.setItem('best_score', newScore);\n    }\n  };\n\n  const clearScore = () => {\n    setScore(0);\n  };\n\n  return (\n    <div>\n      {score < pokedexLength ? (\n        <>\n          <div id=\"instructions\">\n            <div>Pokémon Memory Game!</div>\n            <div> Choose pokémon that you haven't seen.</div>\n          </div>\n          <Scoreboard score={score} bestScore={bestScore} />\n          <Deck\n            addScore={addScore}\n            clearScore={clearScore}\n            pokedexLength={pokedexLength}\n          />\n          <button\n            className=\"btn\"\n            onClick={() => {\n              clearScore();\n              setBestScore(0);\n              localStorage.setItem('best_score', 0);\n            }}\n          >\n            Clear score\n          </button>\n        </>\n      ) : (\n        <>\n          <p>You got all {pokedexLength} pokemons!</p>\n        </>\n      )}\n    </div>\n  );\n}\n","import { AiFillGithub } from 'react-icons/ai';\n\nexport default function Credits() {\n  return (\n    <p>\n      Made by{' '}\n      <a href=\"https://github.com/FernanEd\" target=\"_blank\">\n        <AiFillGithub /> Fernando Ed\n      </a>\n      . 2020.\n    </p>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Credits from './Credits';\nimport './style.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Credits />, document.getElementById('credits'));\n"],"sourceRoot":""}